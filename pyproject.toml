[project]
name = "example_tool"
version = "0.0.1"
description = "This is a simple tool that returns the answer."
authors = [
    {name = "Your Name",email = "you@example.com"}
]
requires-python = ">=3.10"
dependencies = [
    "pydantic (>=2,<3)"
]
readme = "README.md"

[tool.poetry]
packages = [{include = "example_tool"}]


[project.entry-points."tool.entrypoint"]
example-tool = "example_tool.ray_entrypoint:main"


[tool.poetry.group.dev.dependencies]
ray = {extras = ["serve"], version = "^2.42.1"}
pytest = "^8.3.4"
pre-commit = "^4.2.0"
ruff = "^0.11.12"
mypy = "^1.16.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "BLE001",
    "F821",
    "PERF",
    "INP001",
    "A001",
    "PLW2901",
    "G",
    "E501",
    "PTH",
    "TRY",
    "ARG",
    "C",
    "ERA",
    "PLR",
    "DTZ",
    "S",
    "RUF",
    "PERF203",
    "ANN",
    "TRY401",
    "EM",
    "FBT",
    "TRY003",
    "D1",
    "D203",
    "D213",
    "G004",
    "FA",
    "COM812",
    "ISC001",
    "RUF001",
    "B904",
    "ASYNC230",
    "FIX002",
    "T",
    "T201",
    "T203",
]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = false
check_untyped_defs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_subclassing_any = false
warn_redundant_casts = false
warn_unused_ignores = false
strict_optional = false
strict_equality = false
ignore_missing_imports = true
ignore_errors = false
show_error_codes = true
follow_imports = "silent"

exclude = [
    "tests/",
    "build/",
    "dist/",
]

disable_error_code = [
    "no-untyped-def",
    "no-untyped-call",
    "no-any-return",
    "misc",
    "type-arg",
    "unused-ignore",
    "override",
    "assignment",
    "arg-type",
    "call-overload",
    "return-value",
    "attr-defined",
    "name-defined",
    "call-arg",
    "var-annotated",
    "valid-type",
    "comparison-overlap",
    "unused-coroutine",
]

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "pydantic_settings.*",
    "ray.*",
    "fastapi.*",
    "example_package.*",
    "base_agent.*",
]
ignore_errors = true
